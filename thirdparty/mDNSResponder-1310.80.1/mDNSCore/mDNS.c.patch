diff --git a/thirdparty/mDNSResponder-1310.80.1/mDNSCore/mDNS.c b/thirdparty/mDNSResponder-1310.80.1/mDNSCore/mDNS.c
index c32c9154..40c2e51d 100644
--- a/Build/mDNS/mDNS.c
+++ b/Build/mDNS/mDNS.c
@@ -2507,7 +2507,7 @@ mDNSlocal mDNSu16 CheckSum(const void *const data, mDNSs32 length, mDNSu32 sum)
     while (length > 0) { length -= 2; sum += *ptr++; }
     sum = (sum & 0xFFFF) + (sum >> 16);
     sum = (sum & 0xFFFF) + (sum >> 16);
-    return(sum != 0xFFFF ? sum : 0);
+    return(mDNSu16)(sum != 0xFFFF ? sum : 0);
 }
 
 mDNSlocal mDNSu16 IPv6CheckSum(const mDNSv6Addr *const src, const mDNSv6Addr *const dst, const mDNSu8 protocol, const void *const data, const mDNSu32 length)
@@ -2515,10 +2515,10 @@ mDNSlocal mDNSu16 IPv6CheckSum(const mDNSv6Addr *const src, const mDNSv6Addr *co
     IPv6PseudoHeader ph;
     ph.src = *src;
     ph.dst = *dst;
-    ph.len.b[0] = length >> 24;
-    ph.len.b[1] = length >> 16;
-    ph.len.b[2] = length >> 8;
-    ph.len.b[3] = length;
+    ph.len.b[0] = (mDNSu8)(length >> 24);
+    ph.len.b[1] = (mDNSu8)(length >> 16);
+    ph.len.b[2] = (mDNSu8)(length >> 8);
+    ph.len.b[3] = (mDNSu8)length;
     ph.pro.b[0] = 0;
     ph.pro.b[1] = 0;
     ph.pro.b[2] = 0;
@@ -2535,7 +2535,23 @@ mDNSlocal void SendNDP(mDNS *const m, const mDNSu8 op, const mDNSu8 flags, const
     // Some recipient hosts seem to ignore Neighbor Solicitations if the IPv6-layer destination address is not the
     // appropriate IPv6 solicited node multicast address, so we use that IPv6-layer destination address, even though
     // at the Ethernet-layer we unicast the packet to the intended target, to avoid wasting network bandwidth.
-    const mDNSv6Addr mc = { { 0xFF,0x02,0x00,0x00, 0,0,0,0, 0,0,0,1, 0xFF,tpa->b[0xD],tpa->b[0xE],tpa->b[0xF] } };
+    mDNSv6Addr mc;
+    mc.b[0] = 0xFF;
+    mc.b[1] = 0x02;
+    mc.b[2] = 0x00;
+    mc.b[3] = 0x00;
+    mc.b[4] = 0;
+    mc.b[5] = 0;
+    mc.b[6] = 0;
+    mc.b[7] = 0;
+    mc.b[8] = 0;
+    mc.b[9] = 0;
+    mc.b[10] = 0;
+    mc.b[11] = 1;
+    mc.b[12] = 0xFF;
+    mc.b[13] = tpa->b[0xD];
+    mc.b[14] = tpa->b[0xE];
+    mc.b[15] = tpa->b[0xF];
     const mDNSv6Addr *const v6dst = (op == NDP_Sol) ? &mc : tpa;
     NetworkInterfaceInfo *intf = FirstInterfaceForID(m, rr->resrec.InterfaceID);
     if (!intf) { LogMsg("SendNDP: No interface with InterfaceID %p found %s", rr->resrec.InterfaceID, ARDisplayString(m,rr)); return; }
@@ -2606,7 +2622,7 @@ mDNSlocal void SendNDP(mDNS *const m, const mDNSu8 op, const mDNSu8 flags, const
     }
 
     // 0x4E or 0x56 Total NDP Packet length 78 or 86 bytes
-    m->omsg.data[0x13] = ptr - &m->omsg.data[0x36];     // Compute actual length
+    m->omsg.data[0x13] = (mDNSu8*)ptr - &m->omsg.data[0x36];     // Compute actual length
     checksum.NotAnInteger = ~IPv6CheckSum(spa, v6dst, 0x3A, &m->omsg.data[0x36], m->omsg.data[0x13]);
     m->omsg.data[0x38] = checksum.b[0];
     m->omsg.data[0x39] = checksum.b[1];
@@ -5464,10 +5480,11 @@ mDNSlocal void mDNSCoreFreeProxyRR(mDNS *const m)
     m->SPSRRSet = mDNSNULL;
 }
 
-mDNSexport mDNSs32 mDNS_Execute(mDNS *const m)
+mDNSexport mDNSBool mDNS_Execute(mDNS *const m)
 {
     mDNS_Lock(m);   // Must grab lock before trying to read m->timenow
 
+    mDNSBool ret = mDNStrue;
     if (m->timenow - m->NextScheduledEvent >= 0)
     {
         int i;
@@ -5490,32 +5507,37 @@ mDNSexport mDNSs32 mDNS_Execute(mDNS *const m)
         // 2. If it's been more than ten seconds since the last probe failure, we can clear the counter
         if (m->NumFailedProbes && m->timenow - m->ProbeFailTime >= mDNSPlatformOneSecond * 10) m->NumFailedProbes = 0;
 
-        // 3. Purge our cache of stale old records
-        if (m->rrcache_size && m->timenow - m->NextCacheCheck >= 0)
+         // 3. Purge our cache of stale old records
+        if (m->timenow - m->NextCacheCheck >= 0)
         {
             mDNSu32 numchecked = 0;
-            m->NextCacheCheck = m->timenow + FutureTime;
-            for (slot = 0; slot < CACHE_HASH_SLOTS; slot++)
+            m->NextCacheCheck = m->timenow + 0x3FFFFFFF;
+            if (m->rrcache_size)
             {
-                if (m->timenow - m->rrcache_nextcheck[slot] >= 0)
+                for (slot = 0; slot < CACHE_HASH_SLOTS; slot++)
                 {
-                    CacheGroup **cp = &m->rrcache_hash[slot];
-                    m->rrcache_nextcheck[slot] = m->timenow + FutureTime;
-                    while (*cp)
+                    if (m->timenow - m->rrcache_nextcheck[slot] >= 0)
                     {
-                        debugf("m->NextCacheCheck %4d Slot %3d %##s", numchecked, slot, *cp ? (*cp)->name : (domainname*)"\x04NULL");
-                        numchecked++;
-                        CheckCacheExpiration(m, slot, *cp);
-                        if ((*cp)->members) cp=&(*cp)->next;
-                        else ReleaseCacheGroup(m, cp);
+                        CacheGroup **cp = &m->rrcache_hash[slot];
+                        m->rrcache_nextcheck[slot] = m->timenow + 0x3FFFFFFF;
+                        while (*cp)
+                        {
+                            debugf("m->NextCacheCheck %4d Slot %3d %##s", numchecked, slot, *cp ? (*cp)->name : (domainname *)"\x04NULL");
+                            numchecked++;
+                            CheckCacheExpiration(m, slot, *cp);
+                            if ((*cp)->members)
+                                cp = &(*cp)->next;
+                            else
+                                ReleaseCacheGroup(m, cp);
+                        }
                     }
+                    // Even if we didn't need to actually check this slot yet, still need to
+                    // factor its nextcheck time into our overall NextCacheCheck value
+                    if (m->NextCacheCheck - m->rrcache_nextcheck[slot] > 0)
+                        m->NextCacheCheck = m->rrcache_nextcheck[slot];
                 }
-                // Even if we didn't need to actually check this slot yet, still need to
-                // factor its nextcheck time into our overall NextCacheCheck value
-                if (m->NextCacheCheck - m->rrcache_nextcheck[slot] > 0)
-                    m->NextCacheCheck = m->rrcache_nextcheck[slot];
+                debugf("m->NextCacheCheck %4d checked, next in %d", numchecked, m->NextCacheCheck - m->timenow);
             }
-            debugf("m->NextCacheCheck %4d checked, next in %d", numchecked, m->NextCacheCheck - m->timenow);
         }
 
         if (m->timenow - m->NextScheduledSPS >= 0)
@@ -5726,6 +5748,9 @@ mDNSexport mDNSs32 mDNS_Execute(mDNS *const m)
         if (m->NextBLEServiceTime && (m->timenow - m->NextBLEServiceTime >= 0)) serviceBLE();
 #endif // APPLE_OSX_mDNSResponder && ENABLE_BLE_TRIGGERED_BONJOUR
     }
+    else {
+        ret = mDNSfalse;
+    }
 
     // Note about multi-threaded systems:
     // On a multi-threaded system, some other thread could run right after the mDNS_Unlock(),
@@ -5748,7 +5773,7 @@ mDNSexport mDNSs32 mDNS_Execute(mDNS *const m)
     // by the time it gets to the timer callback function).
 
     mDNS_Unlock(m);     // Calling mDNS_Unlock is what gives m->NextScheduledEvent its new value
-    return(m->NextScheduledEvent);
+    return ret;
 }
 
 #ifndef UNICAST_DISABLED
@@ -13887,7 +13912,7 @@ mDNSlocal mDNSBool mDNS_IdUsedInQuestionsList(mDNS * const m, mDNSOpaque16 id)
 
 mDNSexport mDNSOpaque16 mDNS_NewMessageID(mDNS * const m)
 {
-    mDNSOpaque16 id;
+    mDNSOpaque16 id  = mDNSOpaque16fromIntVal(0);
     int i;
 
     for (i=0; i<10; i++)
@@ -15183,7 +15208,7 @@ mDNSexport mStatus uDNS_SetupDNSConfig(mDNS *const m)
     v4 = v6 = r = zeroAddr;
     v4.type = r.type = mDNSAddrType_IPv4;
 
-    if (mDNSPlatformGetPrimaryInterface(&v4, &v6, &r) == mStatus_NoError && !mDNSv4AddressIsLinkLocal(&v4.ip.v4))
+    if (mDNSPlatformGetPrimaryInterface(m, &v4, &v6, &r) == mStatus_NoError && !mDNSv4AddressIsLinkLocal(&v4.ip.v4))
     {
         mDNS_SetPrimaryInterfaceInfo(m,
                                      !mDNSIPv4AddressIsZero(v4.ip.v4) ? &v4 : mDNSNULL,
